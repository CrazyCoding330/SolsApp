{
  "contractName": "NFTMarketplace",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/NFTMarketplace.sol\":\"NFTMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cbc4803332d45dff58f865ed21c942fe4668e47cc7196c8dfe84102040b1d70f\",\"dweb:/ipfs/QmXhZLsocznRWCSyhjo3vo66Z1VsuuNptAVb6ASPYsWtGx\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2baa08eb67d9da46e6c4c049f17b7684a1c68c5268d0f466cfa0eb23ce2bf9b0\",\"dweb:/ipfs/Qmdnj8zj4PfErB2HM2eKmDt7FrqrhggsZ6Qd8MpD593tgj\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/NFTMarketplace.sol\":{\"keccak256\":\"0x2ed519e861c3af916f9580ae43e6131166369f118af1bf635e95975c78455379\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35adabe7d740687a3d873882b1a42357c0fda5ea2c5ec3e65db6267b25f933bb\",\"dweb:/ipfs/QmRdtc6SA6ndRQ4B4ZRWxombZDi5CpS2bb5X59fp8eQwfD\"]}},\"version\":1}",
  "bytecode": "0x6080604052612710600255348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea264697066735822122082a9ffb48e5aa79f2798b86ed71771174f2614bea9104cb8f5babc41be80d60364736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600080fdfea264697066735822122082a9ffb48e5aa79f2798b86ed71771174f2614bea9104cb8f5babc41be80d60364736f6c634300080b0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "401:7156:22:-:0;;;585:5;556:34;;401:7156;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "401:7156:22:-:0;;;;;",
  "source": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract NFTMarketplace {\r\n    using Counters for Counters.Counter ;\r\n\r\n    Counters.Counter nft_counter ;\r\n    Counters.Counter nft_sold_counter ;\r\n\r\n    uint256 private max_supply = 10000 ;\r\n\r\n    // mapping(uint256 => nft) private nfts ;\r\n\r\n    // struct nft {\r\n    //     uint256 nft_id ;\r\n    //     string collection_name ;\r\n    //     string nft_name ;\r\n    //     string nft_description ;\r\n    //     string nft_uri ;\r\n    //     uint256 nft_price ;\r\n    //     address payable owner ;\r\n    //     address payable seller ;\r\n    //     bool sold ;\r\n    //     // uint256 royalty ;\r\n    // }\r\n\r\n    // uint256 listing_price = 0.025 ether ;\r\n\r\n    // constructor() ERC721(\"Metaverse\", \"METT\") {\r\n    // }\r\n\r\n    // function createNFT(string memory cname, string memory name, string memory description, string memory uri, uint256 price) public payable returns(uint256){\r\n    //     require(price > 0, \"createNFT: price is too low\");\r\n    //     require(msg.value == listing_price, \"createNFT: msg.value != listing_price\") ;\r\n    //     require(nft_counter.current() < max_supply, \"createNFT: overflow supply\");\r\n    //     require(checkCollectionName(cname), \"Invalid Collection\");\r\n\r\n    //     nft_counter.increment() ;\r\n\r\n    //     uint256 new_nft_id = nft_counter.current() ;\r\n\r\n    //     _safeMint(msg.sender, new_nft_id) ;\r\n    //     _setTokenURI(new_nft_id, uri);\r\n\r\n    //     nfts[new_nft_id] = nft(\r\n    //         new_nft_id,\r\n    //         cname,\r\n    //         name,\r\n    //         description,\r\n    //         uri,\r\n    //         price,\r\n    //         payable(address(this)),\r\n    //         payable(msg.sender),\r\n    //         false\r\n    //     );\r\n\r\n    //     _transfer(msg.sender, address(this), new_nft_id);\r\n\r\n    //     return new_nft_id ;\r\n    // }\r\n\r\n    // function buyNFT(uint256 tokenId) public payable {\r\n    //     uint256 price = nfts[tokenId].nft_price ;\r\n    //     address seller = nfts[tokenId].seller ;\r\n\r\n    //     require(price > 0) ;\r\n    //     require(msg.value == price) ;\r\n\r\n    //     nfts[tokenId].owner = payable(msg.sender) ;\r\n    //     nfts[tokenId].seller = payable(address(0)) ;\r\n    //     nfts[tokenId].sold = true ;\r\n\r\n    //     nft_sold_counter.increment() ;\r\n\r\n    //     _transfer(address(this), msg.sender, tokenId) ;\r\n\r\n    //     payable(owner()).transfer(listing_price + msg.value * royalty_fee / 100) ;\r\n    //     payable(seller).transfer(msg.value * (100 - royalty_fee) / 100) ;\r\n    // }\r\n\r\n    // function resellNFT(uint256 tokenId, uint256 price) public payable {\r\n    //     require(msg.sender == nfts[tokenId].owner) ;\r\n    //     require(msg.value == listing_price) ;\r\n\r\n    //     nfts[tokenId].owner = payable(address(this)) ;\r\n    //     nfts[tokenId].seller = payable(msg.sender) ;\r\n    //     nfts[tokenId].nft_price = price ;\r\n    //     nfts[tokenId].sold = false ;\r\n\r\n    //     nft_sold_counter.decrement() ;\r\n        \r\n    //     _transfer(msg.sender, address(this), tokenId) ;\r\n    // }\r\n\r\n    // function fetchSoldNFTs() public view returns(nft[] memory) {\r\n\r\n    //     uint256 sold_nfts_count = 0 ;\r\n    //     uint256 current_index = 0 ;\r\n\r\n    //     for(uint256 i = 0 ; i < nft_counter.current(); i++) {\r\n    //         if(nfts[i+1].sold == true) {\r\n    //             sold_nfts_count++;\r\n    //         }\r\n    //     }\r\n\r\n    //     nft[] memory sold_nfts = new nft[]( sold_nfts_count ) ;\r\n\r\n    //     for(uint256 i = 0 ; i < nft_counter.current() ; i++) {\r\n    //         if(nfts[i+1].sold == true) {\r\n    //             sold_nfts[current_index] = nfts[i+1] ;\r\n    //             current_index++;\r\n    //         }\r\n    //     }\r\n\r\n    //     return sold_nfts ;\r\n    // }\r\n\r\n    // function fetchUnsoldNFTs() public view returns(nft[] memory) {\r\n        \r\n    //     uint256 unsold_nft_count = 0 ;\r\n    //     uint256 current_index = 0 ;\r\n\r\n    //     for(uint256 i = 0 ; i < nft_counter.current(); i++) {\r\n    //         if(nfts[i+1].sold == false) {\r\n    //             unsold_nft_count++ ;\r\n    //         }\r\n    //     }\r\n\r\n    //     nft[] memory unsold_nfts = new nft[](unsold_nft_count) ;\r\n\r\n    //     for(uint256 i = 0 ; i < nft_counter.current() ; i++) {\r\n    //         if(nfts[i+1].sold == false) {\r\n    //             unsold_nfts[current_index] = nfts[i+1] ;\r\n    //             current_index++;\r\n    //         }\r\n    //     }\r\n\r\n    //     return unsold_nfts ;\r\n    // }\r\n    \r\n    // function fetchMyNFTs() public view returns(nft[] memory) {\r\n    //     uint256 myNft_count = 0 ;\r\n    //     uint256 current_index = 0 ;\r\n\r\n    //     for(uint256 i = 0 ; i < nft_counter.current() ; i++) {\r\n    //         if(nfts[i+1].owner == msg.sender) {\r\n    //             myNft_count++ ;\r\n    //         }\r\n    //     }\r\n\r\n    //     nft[] memory myNfts = new nft[](myNft_count) ;\r\n\r\n    //     for(uint256 i = 0 ; i < nft_counter.current(); i++) {\r\n    //         if(nfts[i+1].owner == msg.sender) {\r\n    //             myNfts[current_index] = nfts[i+1];\r\n    //             current_index++ ; \r\n    //         }\r\n    //     }\r\n\r\n    //     return myNfts ;\r\n    // }\r\n\r\n    // function fetchNFTs() public view returns(nft[] memory) {\r\n    //     nft[] memory all_nfts = new nft[](nft_counter.current());\r\n\r\n    //     for(uint256 i = 0 ; i < nft_counter.current() ; i++){\r\n    //         all_nfts[i] = nfts[i+1] ;\r\n    //     }\r\n\r\n    //     return all_nfts ;\r\n    // }\r\n\r\n    // function fetchListedNFTs() public view returns(nft[] memory) {\r\n\r\n    //     uint256 listed_nft_count = 0;\r\n        \r\n    //     for(uint256 i = 0 ; i < nft_counter.current() ; i++) {\r\n    //         if(nfts[i+1].seller == msg.sender) {\r\n    //             listed_nft_count++ ;\r\n    //         }\r\n    //     }\r\n\r\n    //     nft[] memory listed_nfts = new nft[](listed_nft_count) ;\r\n    //     uint256 current_index = 0 ;\r\n\r\n    //     for(uint256 i = 0 ; i < nft_counter.current() ; i++) {\r\n    //         if(nfts[i+1].seller == msg.sender) {\r\n    //             listed_nfts[current_index] = nfts[i+1] ;\r\n\r\n    //             current_index++;\r\n    //         }\r\n    //     }\r\n\r\n    //     return listed_nfts ;\r\n    // }\r\n\r\n    // function checkCollectionName(string memory cname) public view returns(bool) {\r\n    //     bool isExist = false ;\r\n\r\n    //     for(uint256 i = 0 ; i < collections.length ; i++){\r\n    //         if(keccak256(abi.encodePacked(collections[i])) == keccak256(abi.encodePacked(cname))){\r\n    //             isExist = true ;\r\n    //             break ;\r\n    //         }\r\n    //     }   \r\n\r\n    //     return isExist ;\r\n    // }\r\n\r\n    // function getOwnerAddress() public view returns(address) {\r\n    //     return owner();\r\n    // }\r\n\r\n    // function getContractBalance() public view returns (uint256){\r\n    //     return payable(address(this)).balance;\r\n    // }\r\n\r\n    // function getRoyaltyFee() public view onlyOwner returns(uint) {\r\n    //     return royalty_fee ;\r\n    // }\r\n\r\n    // function updateRoyaltyFee(uint256 new_royalty_fee) public onlyOwner{\r\n    //     royalty_fee = new_royalty_fee ;\r\n    // }\r\n    \r\n    // function getCollectionNames() public view returns(string[] memory) {\r\n    //     return collections ;\r\n    // }\r\n}\r\n",
  "sourcePath": "E:\\Truffle-Ganache-NFT-Martkeplace\\nft-truffle-contract\\contracts\\NFTMarketplace.sol",
  "ast": {
    "absolutePath": "project:/contracts/NFTMarketplace.sol",
    "exportedSymbols": {
      "Address": [
        3563
      ],
      "Context": [
        3585
      ],
      "Counters": [
        3659
      ],
      "ERC165": [
        3886
      ],
      "ERC721": [
        2979
      ],
      "ERC721URIStorage": [
        3241
      ],
      "IERC165": [
        3898
      ],
      "IERC721": [
        3095
      ],
      "IERC721Metadata": [
        3268
      ],
      "IERC721Receiver": [
        3113
      ],
      "NFTMarketplace": [
        4187
      ],
      "Ownable": [
        104
      ],
      "Strings": [
        3862
      ]
    },
    "id": 4188,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4169,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:32:22"
      },
      {
        "absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
        "file": "@openzeppelin/contracts/utils/Counters.sol",
        "id": 4170,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4188,
        "sourceUnit": 3660,
        "src": "69:52:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol",
        "id": 4171,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4188,
        "sourceUnit": 3242,
        "src": "123:78:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/ERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/ERC721.sol",
        "id": 4172,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4188,
        "sourceUnit": 2980,
        "src": "286:57:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 4173,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4188,
        "sourceUnit": 105,
        "src": "345:52:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "NFTMarketplace",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 4187,
        "linearizedBaseContracts": [
          4187
        ],
        "name": "NFTMarketplace",
        "nameLocation": "410:14:22",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 4177,
            "libraryName": {
              "id": 4174,
              "name": "Counters",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3659,
              "src": "438:8:22"
            },
            "nodeType": "UsingForDirective",
            "src": "432:37:22",
            "typeName": {
              "id": 4176,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4175,
                "name": "Counters.Counter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3591,
                "src": "451:16:22"
              },
              "referencedDeclaration": 3591,
              "src": "451:16:22",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Counter_$3591_storage_ptr",
                "typeString": "struct Counters.Counter"
              }
            }
          },
          {
            "constant": false,
            "id": 4180,
            "mutability": "mutable",
            "name": "nft_counter",
            "nameLocation": "494:11:22",
            "nodeType": "VariableDeclaration",
            "scope": 4187,
            "src": "477:28:22",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_Counter_$3591_storage",
              "typeString": "struct Counters.Counter"
            },
            "typeName": {
              "id": 4179,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4178,
                "name": "Counters.Counter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3591,
                "src": "477:16:22"
              },
              "referencedDeclaration": 3591,
              "src": "477:16:22",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Counter_$3591_storage_ptr",
                "typeString": "struct Counters.Counter"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 4183,
            "mutability": "mutable",
            "name": "nft_sold_counter",
            "nameLocation": "530:16:22",
            "nodeType": "VariableDeclaration",
            "scope": 4187,
            "src": "513:33:22",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_Counter_$3591_storage",
              "typeString": "struct Counters.Counter"
            },
            "typeName": {
              "id": 4182,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4181,
                "name": "Counters.Counter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3591,
                "src": "513:16:22"
              },
              "referencedDeclaration": 3591,
              "src": "513:16:22",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Counter_$3591_storage_ptr",
                "typeString": "struct Counters.Counter"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 4186,
            "mutability": "mutable",
            "name": "max_supply",
            "nameLocation": "572:10:22",
            "nodeType": "VariableDeclaration",
            "scope": 4187,
            "src": "556:34:22",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4184,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "556:7:22",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3130303030",
              "id": 4185,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "585:5:22",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_10000_by_1",
                "typeString": "int_const 10000"
              },
              "value": "10000"
            },
            "visibility": "private"
          }
        ],
        "scope": 4188,
        "src": "401:7156:22",
        "usedErrors": []
      }
    ],
    "src": "33:7526:22"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/NFTMarketplace.sol",
    "exportedSymbols": {
      "Address": [
        3563
      ],
      "Context": [
        3585
      ],
      "Counters": [
        3659
      ],
      "ERC165": [
        3886
      ],
      "ERC721": [
        2979
      ],
      "ERC721URIStorage": [
        3241
      ],
      "IERC165": [
        3898
      ],
      "IERC721": [
        3095
      ],
      "IERC721Metadata": [
        3268
      ],
      "IERC721Receiver": [
        3113
      ],
      "NFTMarketplace": [
        4187
      ],
      "Ownable": [
        104
      ],
      "Strings": [
        3862
      ]
    },
    "id": 4188,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4169,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:32:22"
      },
      {
        "absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
        "file": "@openzeppelin/contracts/utils/Counters.sol",
        "id": 4170,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4188,
        "sourceUnit": 3660,
        "src": "69:52:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol",
        "id": 4171,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4188,
        "sourceUnit": 3242,
        "src": "123:78:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/ERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/ERC721.sol",
        "id": 4172,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4188,
        "sourceUnit": 2980,
        "src": "286:57:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 4173,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4188,
        "sourceUnit": 105,
        "src": "345:52:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "NFTMarketplace",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 4187,
        "linearizedBaseContracts": [
          4187
        ],
        "name": "NFTMarketplace",
        "nameLocation": "410:14:22",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 4177,
            "libraryName": {
              "id": 4174,
              "name": "Counters",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3659,
              "src": "438:8:22"
            },
            "nodeType": "UsingForDirective",
            "src": "432:37:22",
            "typeName": {
              "id": 4176,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4175,
                "name": "Counters.Counter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3591,
                "src": "451:16:22"
              },
              "referencedDeclaration": 3591,
              "src": "451:16:22",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Counter_$3591_storage_ptr",
                "typeString": "struct Counters.Counter"
              }
            }
          },
          {
            "constant": false,
            "id": 4180,
            "mutability": "mutable",
            "name": "nft_counter",
            "nameLocation": "494:11:22",
            "nodeType": "VariableDeclaration",
            "scope": 4187,
            "src": "477:28:22",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_Counter_$3591_storage",
              "typeString": "struct Counters.Counter"
            },
            "typeName": {
              "id": 4179,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4178,
                "name": "Counters.Counter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3591,
                "src": "477:16:22"
              },
              "referencedDeclaration": 3591,
              "src": "477:16:22",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Counter_$3591_storage_ptr",
                "typeString": "struct Counters.Counter"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 4183,
            "mutability": "mutable",
            "name": "nft_sold_counter",
            "nameLocation": "530:16:22",
            "nodeType": "VariableDeclaration",
            "scope": 4187,
            "src": "513:33:22",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_Counter_$3591_storage",
              "typeString": "struct Counters.Counter"
            },
            "typeName": {
              "id": 4182,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4181,
                "name": "Counters.Counter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3591,
                "src": "513:16:22"
              },
              "referencedDeclaration": 3591,
              "src": "513:16:22",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Counter_$3591_storage_ptr",
                "typeString": "struct Counters.Counter"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 4186,
            "mutability": "mutable",
            "name": "max_supply",
            "nameLocation": "572:10:22",
            "nodeType": "VariableDeclaration",
            "scope": 4187,
            "src": "556:34:22",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4184,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "556:7:22",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3130303030",
              "id": 4185,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "585:5:22",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_10000_by_1",
                "typeString": "int_const 10000"
              },
              "value": "10000"
            },
            "visibility": "private"
          }
        ],
        "scope": 4188,
        "src": "401:7156:22",
        "usedErrors": []
      }
    ],
    "src": "33:7526:22"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.11+commit.d7f03943.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.4",
  "updatedAt": "2022-06-02T17:40:05.614Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}